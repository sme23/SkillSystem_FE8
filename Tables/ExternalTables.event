#define BuffEnemy 0x40 
#define DebuffSelf 0xC0 
#define DebuffEnemy 0x80 
#define WepDebuffEntry(mag, str, skl, spd, def, res, luk, mov) "BYTE (mag|DebuffEnemy) (str|DebuffEnemy) (skl|DebuffEnemy) (spd|DebuffEnemy) (def|DebuffEnemy) (res|DebuffEnemy) (luk|DebuffEnemy) (mov|DebuffEnemy)" 
#define WepBuffEntry(mag, str, skl, spd, def, res, luk, mov) "BYTE mag str skl spd def res luk mov" 
#define DebuffSelfEntry(mag, str, skl, spd, def, res, luk, mov) "BYTE mag|DebuffSelf str|DebuffSelf skl|DebuffSelf spd|DebuffSelf def|DebuffSelf res|DebuffSelf luk|DebuffSelf mov|DebuffSelf" 
#define DebuffUnitEntry(mag, str, skl, spd, def, res, luk, mov) "BYTE mag|DebuffSelf str|DebuffSelf skl|DebuffSelf spd|DebuffSelf def|DebuffSelf res|DebuffSelf luk|DebuffSelf mov|DebuffSelf" 
// optional macros 
// max boost is +63/-63 and is definable based on # of bits (31 and 15 also work) 
// the default is 31, so >31 but <63 will just be treated as 31 
// values above the max will just be capped 
ALIGN 4 
NewWeaponDebuffTable: 
// 	mag, str, skl, spd, def, res, luk, mov
BYTE 0 0 0 0 0 0 0 0 // do nothing for 0th entry 
WepDebuffEntry(0,0,1,1,2,2,0,0) //0x1: Bronze Shuriken debuff.
WepDebuffEntry(0,2,0,0,3,3,0,0) //0x2: Iron Shuriken debuff.
WepDebuffEntry(0,3,0,0,4,4,0,0) //0x3: Steel Shuriken debuff.
WepDebuffEntry(0,0,0,4,4,4,0,0) //0x4: Silver Shuriken debuff.
WepDebuffEntry(0,4,0,4,4,4,0,0) //0x5: Pebble debuff.
BYTE 31 31|DebuffSelf 23|DebuffEnemy 24|BuffEnemy 25 26 27 28 // +31 Mag, -31 Str, -23 Skl for enemy, +24 Spd for enemy, +25/+26/+27/+28 Def/Res/Luk/Mov for user 
WORD 0xFFFFFFFF 0xFFFFFFFF // For FEBuilder to show no further data with 

//list of effect ids used by promotion items
//this is the list for promo items that are usable on the prep screen
#ifndef Promotion_IEList
	 #define Promotion_IEList
	PromoEffectList:
	BYTE	0x19	//Hero Crest
	BYTE	0x1A	//Knight Crest
	BYTE	0x1B	//Orion's Bolt
	BYTE	0x1C	//Elysian Whip
	BYTE	0x1D	//Guiding Ring
	BYTE	0x2D	//Master Seal
	BYTE	0x2F	//Heaven Seal
	BYTE	0x30	//Ocean Seal
	BYTE	0x31	//Lunar Brace
	BYTE	0x32	//Solar Brace

	BYTE 0x0	//end of list
#endif

#ifndef ChestKey_IEList
	#define ChestKey_IEList

	ChestKeyEffectList:
	//list of effect ids the ai will check for as chest keys
	BYTE 0x1E	//Chest Key
	BYTE 0x20	//Lockpick
	BYTE 0x26	//Master Key

	BYTE 0x0	//end of list
#endif

#ifndef SelfHealingIEList
	#define SelfHealingIEList
	/*
	The order of this list doesn't matter, priority is determinded by the order of the healing items in the unit's inventory
	For example, if the unit's inventory is [IronSword, Vulnerary, Elixir] the unit will use the vulnerary first when 
	trying to heal even though the elixir restores more. might try to mess with this at a later date but this is how the ai behaves in vanilla
	*/

	SelfHealItemEffectList:
	//List of healing items effects usable by the AI
	BYTE 0x21	//Heal 10 hp effect (Vulnerary)
	BYTE 0x22	//Heal all hp effect (Eilxir)
	BYTE 0x33	//Heal based on value in item data(new effect)

	BYTE 0x0	//end of list
#endif

#define SetWeaponEffectiveness(type_list, coefficient_times_2) "BYTE 0 coefficient_times_2; SHORT type_list"

ALIGN 4

LordWeaponEffectiveness:
SetWeaponEffectiveness(ArmorType|HorseType, 6)
WORD 0 

ArmorEffectiveness:
SetWeaponEffectiveness(ArmorType, 6)
WORD 0

HorseEffectiveness:
SetWeaponEffectiveness(HorseType, 6)
WORD 0

DragonEffectiveness:
SetWeaponEffectiveness(DragonType, 6)
WORD 0

FlierEffectiveness:
SetWeaponEffectiveness(FlierType, 6)
WORD 0

MonsterEffectiveness:
SetWeaponEffectiveness(MonsterType, 6)
WORD 0

#define SetProtection(type_list) "SHORT 0 type_list"
IoteShieldEffectiveness:
SetProtection(FlierType)
SHORT 0

LamposShieldEffectiveness:
SetProtection(HorseType)
SHORT 0

KadmosShieldEffectiveness:
SetProtection(ArmorType)
SHORT 0




ALIGN 4

SwordEffectiveness:
SetWeaponEffectiveness(SwordType, 6)
WORD 0
SacredWeaponEffectiveness:
SetWeaponEffectiveness(MonsterType, 4)
WORD 0
FlierAndMonster1: //Beacon bow
SetWeaponEffectiveness(FlierType|MonsterType, 6)
WORD 0
FlierAndMonster2: //Nidhogg
SetWeaponEffectiveness(FlierType, 6)
SetWeaponEffectiveness(MonsterType, 4)
WORD 0

FlierProtection:
SetProtection(FlierType)









//stat boosts

LeatherShieldBoosts:
StatBonus(0,0,0,0,0,3,0,0,0,0)

IronShieldBoosts:
StatBonus(0,0,0,0,0,4,0,0,0,0)

SteelShieldBoosts:
StatBonus(0,0,0,0,0,5,0,0,0,0)

SilverShieldBoosts:
StatBonus(0,0,0,0,0,6,0,0,0,0)

HexlockShieldBoosts:
StatBonus(0,0,0,0,0,0,5,0,0,0)

AngelRingBoosts:
StatBonus(0,0,0,0,0,0,0,10,0,0)

SpeedRingBoosts:
StatBonus(0,0,0,0,5,0,0,0,0,0)

PrayerRingBoosts:
StatBonus(0,0,0,0,0,0,5,0,0,0)

StarJacinthBoosts:
GrowthBonus(30,30,30,30,30,30,30,30)

AriesShardBoosts:
GrowthBonus(0,0,0,0,0,0,0,40)

TaurusShardBoosts:
GrowthBonus(5,5,5,5,5,5,5,5)

GeminiShardBoosts:
GrowthBonus(0,25,0,-5,0,20,0,0)

CancerShardBoosts:
GrowthBonus(0,-10,0,0,0,50,0,0)

LeoShardBoosts:
GrowthBonus(0,50,0,0,0,-10,0,0)

VirgoShardBoosts:
GrowthBonus(0,0,0,10,0,-10,30,0)

LibraShardBoosts:
GrowthBonus(-10,0,0,5,40,0,-10,10)

ScorpioShardBoosts:
GrowthBonus(0,0,20,20,10,0,0,-10)

SagittariusShardBoosts:
GrowthBonus(-10,0,0,40,10,0,0,0)

CapricornShardBoosts:
GrowthBonus(20,0,15,5,-10,10,0,0)

AquariusShardBoosts:
GrowthBonus(0,15,0,15,10,0,0,0)

PiscesShardBoosts:
GrowthBonus(10,0,0,0,0,10,10,10)

AngelicRobeBoosts:
StatBonus(7,0,0,0,0,0,0,0,0,0)

EnergyDropBoosts:
StatBonus(0,2,0,0,0,0,0,0,0,0)

SpiritDustBoosts:
StatBonus(0,0,2,0,0,0,0,0,0,0)

SecretBookBoosts:
StatBonus(0,0,0,2,0,0,0,0,0,0)

SpeedwingBoosts:
StatBonus(0,0,0,0,2,0,0,0,0,0)

GoddessIconBoosts:
StatBonus(0,0,0,0,0,0,0,2,0,0)

DragonshieldBoosts:
StatBonus(0,0,0,0,0,2,0,0,0,0)

TalismanBoosts:
StatBonus(0,0,0,0,0,0,2,0,0,0)

BootsBoosts:
StatBonus(0,0,0,0,0,0,0,0,2,0)

BodyRingBoosts:
StatBonus(0,0,0,0,0,0,0,0,0,2)

MasterSealPromotionClassList:
BYTE Thief Mercenary Myrmidon Myrmidon_F Archer WyvernRider Shaman Fighter Brigand Pirate Monk Priest Cleric Troubadour Soldier Revenant Bonewalker Bonewalker_Bow Bael MautheDoog Tarvos Mogall Gargoyle Cavalier Cavalier_F Knight Knight_F Mage Mage_F
BYTE 0

//these serve no practical purpose other than being funny
ALIGN 4
Ch1NamePtr:
String(C01)
BYTE 0

ALIGN 4
Ch2NamePtr:
String(C02)
BYTE 0

ALIGN 4
Ch3NamePtr:
String(C03)
BYTE 0

ALIGN 4
Ch4NamePtr:
String(C04)
BYTE 0

ALIGN 4
Ch5NamePtr:
String(C05)
BYTE 0

ALIGN 4
Ch6NamePtr:
String(C06)
BYTE 0

ALIGN 4
Ch6xNamePtr:
String(G06)
BYTE 0

ALIGN 4
Ch7NamePtr:
String(C07)
BYTE 0

ALIGN 4
Ch8NamePtr:
String(C08)
BYTE 0

ALIGN 4
Ch9NamePtr:
String(C09)
BYTE 0

ALIGN 4
Ch10NamePtr:
String(C10)
BYTE 0

ALIGN 4
Ch11NamePtr:
String(C11)
BYTE 0

ALIGN 4
Ch12NamePtr:
String(C12)
BYTE 0

ALIGN 4
Ch13NamePtr:
String(C13)
BYTE 0

ALIGN 4
Ch14NamePtr:
String(C14)
BYTE 0

ALIGN 4
Ch15NamePtr:
String(C15)
BYTE 0

ALIGN 4
Ch16NamePtr:
String(C16)
BYTE 0

ALIGN 4
Ch17NamePtr:
String(C17)
BYTE 0

ALIGN 4
Ch18NamePtr:
String(C18)
BYTE 0

ALIGN 4
Ch19NamePtr:
String(C19)
BYTE 0

ALIGN 4
Ch20NamePtr:
String(C20)
BYTE 0

ALIGN 4
Ch21NamePtr:
String(C21)
BYTE 0

ALIGN 4
Ch22NamePtr:
String(C22)
BYTE 0

ALIGN 4
Ch23NamePtr:
String(C23)
BYTE 0

ALIGN 4
Ch24NamePtr:
String(C24)
BYTE 0

ALIGN 4
Ch25NamePtr:
String(C25)
BYTE 0

ALIGN 4
Ch26NamePtr:
String(C26)
BYTE 0

ALIGN 4
Ch27NamePtr:
String(C27)
BYTE 0

ALIGN 4
Ch28NamePtr:
String(C28)
BYTE 0

ALIGN 4
Ch29NamePtr:
String(C29)
BYTE 0

ALIGN 4
Cutscene1NamePtr:
String(E01)
BYTE 0

ALIGN 4
Cutscene2NamePtr:
String(E02)
BYTE 0

ALIGN 4
Cutscene3NamePtr:
String(E03)
BYTE 0

ALIGN 4
Cutscene4NamePtr:
String(E04)
BYTE 0

ALIGN 4
Cutscene5NamePtr:
String(E05)
BYTE 0

ALIGN 4
Cutscene6NamePtr:
String(E06)
BYTE 0

ALIGN 4
Cutscene7NamePtr:
String(E07)
BYTE 0

ALIGN 4
Cutscene8NamePtr:
String(E08)
BYTE 0

